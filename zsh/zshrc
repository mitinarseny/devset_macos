#!/bin/zsh

unsetopt MAIL_WARNING       # Don't print a warning message if a mail file has been accessed.
setopt NOTIFY               # Report status of background jobs immediately.

setopt HIST_BEEP            # Beep when accessing non-existent history.
setopt HIST_FIND_NO_DUPS    # skip duplicate adjacent search results

setopt AUTO_CD              # Auto changes to a directory without typing cd.
setopt AUTO_PUSHD           # Push the old directory onto the stack on cd.
setopt AUTO_NAME_DIRS

setopt INTERACTIVE_COMMENTS # support for comments in command line mode

export LANG=${LANG:-en_US.UTF-8}
export WORDCHARS='*?_-[]~;!#%^(){}<>$'

command -v nvim &> /dev/null \
  && export EDITOR='nvim' \
  || export EDITOR='vim'
command -v code &> /dev/null \
  && export VEDITOR='code'
command -v less &> /dev/null \
  && export PAGER='less'

# Hitory
export HISTSIZE=10000
export SAVEHIST=10000
export HISTFILE=$HOME/.zsh_history
setopt INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt EXTENDED_HISTORY

export CASE_SENSITIVE=0
export CLICOLOR=1

_zcompinit_custom() {
  autoload -Uz compinit
  local zcd="${HOME}/.zcompdump"
  local zcdc="${zcd}.zwc"
  # Compile the completion dump to increase startup speed, if dump is newer or doesn't exist,
  # in the background as this is doesn't affect the current session
  if [[ -f "${zcd}"(#qN.m+1) ]]; then
        compinit -i -d "${zcd}"
        { rm -f "${zcdc}" && zcompile "${zcd}" } &!
  else
        compinit -C -d "${zcd}"
        { [[ ! -f "${zcdc}" || "${zcd}" -nt "${zcdc}" ]] && rm -f "${zcdc}" && zcompile "${zcd}" } &!
  fi
}

# borrowed from:
# https://www.reddit.com/r/zsh/comments/alkq5a/how_can_i_change_the_default_location_of_zshrc/egaw8q9
dotfiles="${${(%):-%x}:P:h:h}"
fpath+=("${dotfiles}/zsh/functions")
autoload -Uz ${dotfiles}/zsh/functions/*(.:t)

typeset -U config_files
config_files=(${dotfiles}/**/*.zsh)

unset dotfiles

# load the path files
for file in ${(M)config_files:#*/path.zsh}; do
  . "${file}"
done

# load antibody plugins
[ -f "${HOME}/.zsh_plugins.sh" ] && . "${HOME}/.zsh_plugins.sh"

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}; do
  . "${file}"
done

# init completion
_zcompinit_custom

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}; do
  . "${file}"
done

unset config_files

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
[ -r "${HOME}/.localrc" ] && . "${HOME}/.localrc"

# remove duplicated from PATH
typeset -U PATH

# unbind vi mode
bindkey -r '\e'

# https://stackoverflow.com/a/30899296
_r-delregion() {
  if ((REGION_ACTIVE)) then
     zle kill-region
  else 
    local widget_name=$1
    shift
    zle $widget_name -- $@
  fi
}

_r-deselect() {
  ((REGION_ACTIVE = 0))
  local widget_name=$1
  shift
  zle $widget_name -- $@
}

_r-select() {
  ((REGION_ACTIVE)) || zle set-mark-command
  local widget_name=$1
  shift
  zle $widget_name -- $@
}

for key     seq        mode      widget (
    sleft   $'\e[1;2D' select    backward-char
    sright  $'\e[1;2C' select    forward-char
    sup     $'\e[1;2A' select    up-line-or-history
    sdown   $'\e[1;2B' select    down-line-or-history
    
    send    $'\e[1;2F' select    end-of-line
    send2   $'\e[4;2~' select    end-of-line

    shome   $'\e[1;2H' select    beginning-of-line
    shome2  $'\e[1;2~' select    beginning-of-line

    left    $'\e[D'    deselect  backward-char
    right   $'\e[C'    deselect  forward-char

    end     $'\EOF'    deselect  end-of-line
    end2    $'\e[4~'   deselect  end-of-line

    home    $'\EOH'    deselect  beginning-of-line
    home2   $'\e[1~'   deselect  beginning-of-line

    csleft  $'\e[1;6D' select    backward-word
    csright $'\e[1;6C' select    forward-word
    csend   $'\e[1;6F' select    end-of-line
    cshome  $'\e[1;6H' select    beginning-of-line

    cleft   $'\e[1;5D' deselect  backward-word
    aleft   $'\e[1;3D' deselect  backward-word
    cright  $'\e[1;5C' deselect  forward-word
    aright  $'\e[1;3C' deselect  forward-word

    del     $'\e[3~'   delregion delete-char
    bs      $'^?'      delregion backward-delete-char
  ) {
  functions[key-$key]="_r-$mode $widget"
  zle -N key-$key
  bindkey "${seq}" key-$key
}

#bindkey '\e[1;3D' backward-word
#bindkey '\e[1;3C' forward-word
# bindkey '\e^?'    backward-kill-word
# bindkey '\e'

# start tmux if interactive
if [[ $- == *i* ]] && [ -z "${TMUX}" ] && command -v tmux 2>&1 > /dev/null; then
  tmux new-session -A -s main 
fi

